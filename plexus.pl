#!/usr/bin/env perl
use 5.010;
use strict;
use warnings;
use autodie;
use Config::File;                 # Debian: libconfig-file-perl
use File::Copy;
use Text::Markdown 'markdown';    # Debian: libtext-markdown-perl

# global vars ###############################################################
my $ch;                           # config hash
my $out;

# abbreviations
my $cs;                           # CharSet
my $dt;                           # DocType
my $il;                           # Indentation level
my $is;                           # Indentation string
my $od;                           # Output Directory
my $of;                           # Output File
my $wd;                           # Working directory

my %docs = (
    'h4f' => '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" '
        . '"http://www.w3.org/TR/html4/frameset.dtd">',
    'h4s' => '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" '
        . '"http://www.w3.org/TR/html4/strict.dtd">',
    'h4t' => '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" '
        . '"http://www.w3.org/TR/html4/loose.dtd">',
    'h5'  => '<!DOCTYPE html>',
    'x1f' => '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" '
        . '"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">',
    'x1s' => '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" '
        . '"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">',
    'x1t' => '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" '
        . '"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">',
    'x11' => '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" '
        . '"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">'
);

# end global vars ###########################################################

# Sub calls
&load_configs;
&defaults;
&setup;
my $head = &head;
my $body = &body;

say '--------------------------------------'
    . '--------------------------------------'
    if $out eq 'STDOUT';

print $out $head;
print $out $body;

close $out;

# End sub calls

# Subs ######################################################################
sub defaults {

    # Set some important vars if the user hasn't
    $cs = $ch->{ 'charset' }            // 'utf-8';
    $dt = $ch->{ 'doctype' }            // 'html5';
    $il = int( $ch->{ 'indentation' } ) // 1;
    $is = ' ' x $il                     // ' ';
    $od = $ch->{ 'output_dir' }         // '.';
    $of = $ch->{ 'output_file' }        // 'plexus_output.html';

} ## end sub defaults

#
#
#
#
sub load_configs {
    my $local_cfg;

    # Ensure that ~/.plexusrc exists then load it
    if ( -f "$ENV{HOME}/.plexusrc" ) {
        say "Loading global config file '$ENV{HOME}/.plexusrc'.";
    }
    else {
        say "Creating global config file '$ENV{HOME}/.plexusrc'.";
        open( my $gcf, ">>", "$ENV{HOME}/.plexusrc" );
        say $gcf "\n# File generated by plexus.pl";
        close $gcf;
    } ## end else [ if ( -f "$ENV{HOME}/.plexusrc")]

    $ch = Config::File::read_config_file( "$ENV{HOME}/.plexusrc" );

    # Check for ./config
    if ( -f 'config' ) {
        say "Loading local config file 'config'.";
        $local_cfg = Config::File::read_config_file( 'config' );
    }
    else {
        say "Local config file 'config' not found.";
    }

    say "No config files found. I'll try my best."
        unless ( $ch or $local_cfg );

    # Add new values from local config
    @$ch{ keys %$local_cfg } = values %$local_cfg;
}    # end &load_configs

#
#
#
#
sub setup {
    # Expand ~ to $HOME. Future versions will utilize File::HomeDir.
    s#~[/\s]#$ENV{HOME}/# for values %{ $ch };

    $wd = $ch->{ 'working_dir' }        // '.';
    chdir $wd;

    unless ( $of eq 'STDOUT' ) {
        move $of, "$of.orig" if -f $of;
        open $out, ">", $of;
    }

}    # end &setup

#
#
#
#
sub head {
    my $header;

    # If there's a head_file, we'll use it alone for <head>
    if ( $ch->{ 'head_file' } ) {
        open( my $fh, "<", "$ch->{'head_file'}" );
        $header .= $_ for <$fh>;
        close $fh;
        return $header;
    } ## end if ( $ch->{ 'head_file'...})

    # Otherwise, we'll write one. (No need for an else block due to the return
    # statement.)

    # DOCTYPE ###############################################################
    if ( $dt eq 'html5' ) {
        $header = "<!DOCTYPE html>\n";
    }
    elsif ( $dt eq 'html4.01frames' ) {
        $header = "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 "
            . "Frameset//EN\" \"http://www.w3.org/TR/html4/frameset.dtd\">\n";
    }
    elsif ( $dt eq 'html4.01strict' ) {
        $header = "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" "
            . "\"http://www.w3.org/TR/html4/strict.dtd\">\n";
    }
    elsif ( $dt eq 'html4.01trans' ) {
        $header = "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01"
            . "Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n";
    }
    elsif ( $dt eq 'xhtml1.0frames' ) {
        $header =
              "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 "
            . "Frameset//EN\" "
            . "\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">\n";
    } ## end elsif ( $dt eq 'xhtml1.0frames') [ if ( $dt eq 'html5' ) ]
    elsif ( $dt eq 'xhtml1.0strict' ) {
        $header = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\""
            . "\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n";
    }
    elsif ( $dt eq 'xhtml1.0trans' ) {
        $header =
              "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML "
            . "1.0 Transitional//EN\" "
            . "\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n";
    } ## end elsif ( $dt eq 'xhtml1.0trans') [ if ( $dt eq 'html5' ) ]
    elsif ( $dt eq 'xhtml1.1' ) {
        $header = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" "
            . "\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n";
    }
    else {
        $header = "<!DOCTYPE html>\n";
    }

    # <html> ################################################################
    if ( $dt eq 'html5' ) {
        $header .= "<html lang=\"$ch->{'lang'}\" />\n";
    }
    else {
        $header .= "<html lang=\"$ch->{'lang'}\" xml:lang=\"$ch->{'lang'}\" "
            . "xmlns=\"http://www.w3.org/1999/xhtml\" />\n";
    }

    # end html block

    # <head> ################################################################
    $header .= "<head>\n";

    if ( $dt eq 'html5' ) {
        $header .= $is . "<meta charset=\"$ch->{'charset'}\" />\n";
    }
    else {
        $header .=
              $is
            . "<meta http-equiv=\"Content-Type\" content=\"text/html; "
            . "charset=$ch->{'charset'}\" />\n";
    } ## end else [ if ( $dt eq 'html5' ) ]

    # end charset block

    $header .= $is . "<meta name=\"author\" content=\"$ch->{'author'}\" />\n";

    my @styles = split '\s+', $ch->{ 'styles' };
    for ( @styles ) {
        $header .=
              $is
            . '<link rel="stylesheet" href="http://'
            . 'fonts.googleapis.com/css?family='
            . $_ . '" />' . "\n";
    } ## end for ( @styles )

    my @fonts = split '\s+', $ch->{ 'google_fonts' };
    for ( @fonts ) {
        $header .=
              $is
            . '<link type="text/css" rel="stylesheet" href="'
            . $_ . '" />' . "\n";
    } ## end for ( @fonts )

    # end stylesheets

    $header .= $is . "<title>$ch->{'title'}</title>\n";

    if ( -f "$wd/head.css" ) {
        say "Including '$wd/head.css' in <head>.";
        $header .= $is . '<style type="text/css">' . "\n";
        open( my $head_css, "<", "$wd/head.css" );
        $header .= $is x 4 . $_ while <$head_css>;
        $header .= $is . "</style>\n";
        close $head_css;
    } ## end if ( -f "$wd/head.css")
    if ( -f "$wd/head.js" ) {
        say "Including '$wd/head.js' in <head>.";
        $header .= $is . '<script type="text/javascript">' . "\n";
        open( my $head_js, "<", "$wd/head.js" );
        $header .= $is x 4 . $_ while <$head_js>;
        $header .= $is . "</script>\n";
        close $head_js;
    } ## end if ( -f "$wd/head.js" )
    $header .= "</head>\n";
    return $header;

}    # end &head

#
#
#
#
sub body {
    my $content = "<body>\n";
    $content .= &read_file( "nav" ) if $dt eq 'html5';
    $content .= &read_file( "body" );
    $content .= &read_file( "footer" );
    $content .= "</body>\n</html>\n";
    return $content;
}    # end &body

#
#
#
#
sub read_file {
    my $name = shift;
    my $text = "<$name>\n" unless $name eq 'body';
    my $content;

    # We are only going to use the *first* file.
    my @files = glob "$wd/$name.*";
    if ( @files ) {
        open( my $fh, "<", "$files[ 0 ]" );
        my @lines = <$fh>;
        $content .= &intpl( $_ ) for @lines;

        if ( $files[ 0 ] =~ /\.md$/ ) {
            $content = markdown( $content );
        }

        close $fh;

    } ## end if ( @files )
    else {
        say "File not found.";
    }

    $text .= $content . "\n";
    $text .= "</$name>\n" unless $name eq 'body';
    return $text;
}    # end &footer

#
#
#
#
sub intpl {
    my $ref = \@_;
    for ( @$ref ) {

        # this is if a single sigil is used, $var
        #       my $line = s/\\\$/&#36;/g;
        #       while ( /(\$[\w\-]+)/ ) {
        #           my $var = $1;
        #           $var =~ s/\$//g;
        #           my $val = $ch->{ "$var" };
        #           if ( $val ) {
        #               s/\$$var/$val/g;
        #           }
        #           else {
        #               s/(\$[\w]+)/$var/;
        #           }
        #       }    # end while
        #       return $_;

        # this is if a double sigile is used, $$var
        while ( /\$\$([\w-]+)/ ) {
            my $key = $1;
            if ( $ch->{ $key } ) {
                s/\$\$$key/$ch->{$key}/;
            }
            else {
                s/\$\$/&#36;&#36/;
            }
        } ## end while ( /\$\$([\w-]+)/ )
        return $_;
    }    # end for @_
}    # end intpl

#
#
#


# End Subs ##################################################################
#close $out;

exit 0;
