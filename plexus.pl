#!/usr/bin/env perl
use 5.010;
use strict;
use warnings;
use autodie;
use Config::File;                 # Debian: libconfig-file-perl
use File::Copy;
use Text::Markdown 'markdown';    # Debian: libtext-markdown-perl

# global vars ###############################################################
my $ch;                           # config hash
my $out;

# abbreviations
my $cs;                           # CharSet
my $dt;                           # DocType
my $od;                           # Output Directory
my $of;                           # Output File
my $wd;                           # Working directory

my %docs = (
	'h4f' => '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" '
		. '"http://www.w3.org/TR/html4/frameset.dtd">',
	'h4s' => '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" '
		. '"http://www.w3.org/TR/html4/strict.dtd">',
	'h4t' => '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" '
		. '"http://www.w3.org/TR/html4/loose.dtd">',
	'h5'  => '<!DOCTYPE html>',
	'x1f' => '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" '
		. '"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">',
	'x1s' => '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" '
		. '"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">',
	'x1t' => '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" '
		. '"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">',
	'x11' => '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" '
		. '"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">'
);

# end global vars ###########################################################

# Sub calls
&load_configs;
&defaults;
&setup;
&head;

# End sub calls

# Subs ######################################################################
sub defaults {

	# Set some important vars if the user hasn't
	$cs = $ch->{ 'charset' }     // 'utf-8';
	$dt = $ch->{ 'doctype' }     // 'html5';
	$od = $ch->{ 'output_dir' }  // '.';
	$of = $ch->{ 'output_file' } // 'plexus_output.html';
	$wd = $ch->{ 'working_dir' } // '.';

} ## end sub defaults

#
#
#
#
sub load_configs {
	my $local_cfg;

	# Ensure that ~/.plexusrc exists then load it
	if ( -f "$ENV{HOME}/.plexusrc" ) {
		say "Loading global config file '$ENV{HOME}/.plexusrc'.";
	}
	else {
		say "Instantiating Global config file '$ENV{HOME}/.plexusrc'.";
		open( my $gcf, ">>", "$ENV{HOME}/.plexusrc" );
		say $gcf "\n# File generated by plexus.pl";
		close $gcf;
	} ## end else [ if ( -f "$ENV{HOME}/.plexusrc")]

	$ch = Config::File::read_config_file( "$ENV{HOME}/.plexusrc" );

	# Check for ./config
	if ( -f 'config' ) {
		say "Loading local config file 'config'.";
		$local_cfg = Config::File::read_config_file( 'config' );
	}
	else {
		say "Local config file 'config' not found.";
	}

	say "No config files found. I'll try my best."
		unless ( $ch or $local_cfg );

	# Add new values from local config
	@$ch{ keys %$local_cfg } = values %$local_cfg;
}    # end &load_configs

#
#
#
#
sub setup {

	# Expand ~ to $HOME. Future versions will utilize File::HomeDir.
	s#^~/#$ENV{HOME}/# for values %{ $ch };

	chdir $wd;

	move $of, "$of.orig" if -f $of;

	open $out, ">", $of;

}    # end &setup

#
#
#
#
sub files {
	my @file_list;
}

#
#
#
#
sub head {
	my $header;

	# DOCTYPE ###############################################################
	if ( $dt eq 'html5' ) {
		$header = "<!DOCTYPE html>\n";
	}
	elsif ( $dt eq 'html4.01frames' ) {
		$header = "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 "
			. "Frameset//EN\" \"http://www.w3.org/TR/html4/frameset.dtd\">\n";
	}
	elsif ( $dt eq 'html4.01strict' ) {
		$header = "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" "
			. "\"http://www.w3.org/TR/html4/strict.dtd\">\n";
	}
	elsif ( $dt eq 'html4.01trans' ) {
		$header = "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01"
			. "Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n";
	}
	elsif ( $dt eq 'xhtml1.0frames' ) {
		$header =
			  "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 "
			. "Frameset//EN\" "
			. "\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">\n";
	} ## end elsif ( $dt eq 'xhtml1.0frames') [ if ( $dt eq 'html5' ) ]
	elsif ( $dt eq 'xhtml1.0strict' ) {
		$header = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\""
			. "\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n";
	}
	elsif ( $dt eq 'xhtml1.0trans' ) {
		$header =
			  "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML "
			. "1.0 Transitional//EN\" "
			. "\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n";
	} ## end elsif ( $dt eq 'xhtml1.0trans') [ if ( $dt eq 'html5' ) ]
	elsif ( $dt eq 'xhtml1.1' ) {
		$header = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" "
			. "\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n";
	}
	else {
		$header = "<!DOCTYPE html>\n";
	}

	# <html> ################################################################
	if ( $dt eq 'html5' ) {
		$header .= "<html lang=\"$ch->{'lang'}\" />\n";
	}
	else {
		$header .= "<html lang=\"$ch->{'lang'}\" xml:lang=\"$ch->{'lang'}\" "
			. "xmlns=\"http://www.w3.org/1999/xhtml\" />\n";
	}

	# end html block

	# <head> ################################################################
	$header .= "<head>\n";

	if ( $dt eq 'html5' ) {
		$header .= " <meta charset=\"$ch->{'charset'}\" />\n";
	}
	else {
		$header .= " <meta http-equiv=\"Content-Type\" content=\"text/html; "
			. "charset=$ch->{'charset'}\" />\n";
	}

	# end charset block

	$header .= " <meta name=\"author\" content=\"$ch->{'author'}\" />\n";

	my @styles = split '\s+', $ch->{ 'styles' };
	for ( @styles ) {
		$header .= ' <link rel="stylesheet" href="' . $_ . '" />' . "\n";
	}

	# end stylesheets

	$header .= " <title>$ch->{'title'}</title>\n";

	$header .= "</head>\n\n";
	print $header;

	# </head> ###############################################################
}    # end &head

#
#
#
#
sub body {
	my $content = "<body>\n";

	$content .= "</body>\n" . "</html>\n";

}    # end &body

#
#
#
#
sub footer {
	my $footer_text  = "<footer>\n";
	my @footer_files = glob "$wd/footer*";
	if ( @footer_files ) {
		open( my $ffh, "<", "$footer_files[0]" );
		my @lines = <$ffh>;
		for ( @lines ) {
			$_ = intpl( "$_" );
			if ( $footer_files[ 0 ] =~ /\.md$/ ) {
				$footer_text .= markdown( $_ );
			}
			else {
				$footer_text .= $_;
			}
		}    # end for
	}    # end if
	else {
		say "No footer file found.";
	}

	#		$footer_text .= markdown($_) while <$ft>;
	#		$footer_text .= $_ while <$ft>;

	$footer_text .= "</footer>\n";
	print $footer_text;
}    # end &footer

#
#
#
#
sub intpl {
	my $ref = \@_;
	for ( @$ref ) {
		my $line = s/\\\$/&#36;/g;
		while ( /(\$[\w\-]+)/ ) {
			my $var = $1;
			$var =~ s/\$//g;
			my $val = $ch->{ "$var" };
			if ( $val ) {
				s/\$$var/$val/g;
			}
			else {
				s/(\$[\w]+)/$var/;
			}
		}    # end while
		return $_;
	}    # end for @_
}    # end intpl

# End Subs ##################################################################
#close $out;

exit 0;
